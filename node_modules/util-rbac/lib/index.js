var fs = require('fs');
var path = require('path');
var cipher = require('util-cipher');
// var uid = require('uid2');

var User = require('../model/rbac_user.js');
var Role = require('../model/rbac_role.js');

var def_path = null;
var default_folder = null;
var folder_bykey = true;
var _debug = false;

exports.init = function(p, mongoose, debug) {
	def_path = p;
	_debug = debug;
	if (fs.existsSync(path.join(p, 'folder.json'))) {
		var fd = require(path.join(p, 'folder.json'));
		default_folder = fd.value;
		folder_bykey = fd.type;
	}
	User = User(mongoose);
	Role = Role(mongoose);
	return fs.existsSync(path.join(p, 'menu.json')) &&
		fs.existsSync(path.join(p, 'operate.json')) &&
		fs.existsSync(path.join(p, 'uri.json'));
};


function uri(req, res, next) {
	if (_debug) {
		next();
	} else {
		var u = req.method + req.baseUrl + req.route.path;
		if (req.session.rbac_uri && req.session.rbac_uri[u]) {
			next();
		} else {
			res.sendStatus(403);
		}
	}
}

function menu(req, res, next) {
	res.locals.rbac_menus_ = build_menus(req.session.rbac_folder || default_folder, req.session.rbac_menu, req.session.rbac_folder_type || folder_bykey);
	next();
}

function operate(req, res, next) {
	res.locals.rbac_operate_ = req.session.rbac_operate;
	next();
}

exports.uri = uri;

exports.menu = menu;

exports.operate = operate;

exports.all = [uri, operate];

exports.load = function(name, pwd, req, fn) {
	User.findOne({
		user: name,
		passwd: cipher.md5['+'](pwd)
	}).populate('roles').exec(function(err, user) {
		if (err) fn(err, user);
		else {
			var uri = {},
				menu = {},
				operate = {};
			if (user) {
				user.roles.forEach(function(r) {

					r.auth.menu.forEach(function(m) {
						// for (var i in m) {
						menu[m] = true;
						// }
					});
					r.auth.uri.forEach(function(u) {
						// for (var u_ in u) {
						uri[u] = true;
						// }
					});
					r.auth.operate.forEach(function(o) {
						// for (var o_ in o) {
						operate[o] = true;
						// }
					});
				});
			}
			req.session.rbac_user = name;
			req.session.rbac_uri = uri;
			req.session.rbac_menu = menu;
			req.session.rbac_operate = operate;

			_debug = false;
			fn(null, user);
		}
	});
};

function build_menus(folder, has_menu, by_key) {
	var _menus_ = [];
	var all_menu = require(path.join(def_path, 'menu.json'));
	if (by_key) { //通过key值匹配
		var _key_map = {};
		for (var m in all_menu) {
			var k = m.substr(0, 2);
			if (!_key_map[k]) {
				_key_map[k] = [];
			}
			if (has_menu[m]) { //有权限
				all_menu[m]['key'] = m;
				_key_map[k].push(all_menu[m]);
			}
		}

		folder.forEach(function(fd) {
			if (_key_map[fd.key] && _key_map[fd.key].length > 0) {
				_menus_.push({
					'key': fd.key,
					'name': fd.name,
					'sub': _key_map[fd.key]
				});
			}
		});
	} else {
		folder.forEach(function(fd) {
			var sub = [];
			fd.sub.forEach(function(s) {
				if (has_menu[s] && all_menu[s]) {
					all_menu[m]['key'] = m;
					sub.push(all_menu[s]);
				}
			});
			if (sub.length > 0) {
				_menus_.push({
					'key': fd.key,
					'name': fd.name,
					'sub': sub
				});
			}
		});
	}
	return _menus_;
}

exports.debug = function(req) {
	if (!req.session.rbac_uri) {
		req.session.rbac_uri = require(path.join(def_path, 'uri.json'));
		req.session.rbac_menu = require(path.join(def_path, 'menu.json'));
		req.session.rbac_operate = require(path.join(def_path, 'operate.json'));
	}
};

exports.findRole = function(name, req, fn) {
	var cond = {};
	if (name) {
		cond['name'] = name;
	}

	Role.find(cond).exec(function(err, role) {
		if (err) fn(err);
		else {
			if (name) {
				var uri = [],
					menu = [],
					operate = [];
				if (role) {

					role[0].auth.menu.forEach(function(m) {
						// for (var i in m) {
						menu.push(m);
						// }
					});
					role[0].auth.uri.forEach(function(u) {
						// for (var u_ in u) {
						uri.push(u);
						// }
					});
					role[0].auth.operate.forEach(function(o) {
						// for (var o_ in o) {
						operate.push(o);
						// }
					});
				}
				req.session._uri = uri;
				req.session._menu = menu;
				req.session._operate = operate;
			}
			fn(err, role);
		}
	});
};

exports.findAdmin = function(id, fn) {
	var cond = {};
	if (id)
		cond['_id'] = id;

	User.find(cond).populate('roles').exec(fn);
};

exports.createRoot = function(fn) {
	var _auth = {
		menu: [],
		operate: [],
		uri: []
	};
	var m = require(path.join(def_path, 'menu.json'));
	for (var i in m) {
		_auth.menu.push(i);
	}

	var u = require(path.join(def_path, 'uri.json'));
	for (var u_ in u) {
		_auth.uri.push(u_);
	}
	var o = require(path.join(def_path, 'operate.json'));
	for (var o_ in o) {
		_auth.operate.push(o_);
	}

	User.remove({}, function(e, u) { //清空系统用户
		Role.remove({}, function(e, r) { //清空系统角色			
			var _role = new Role({
				name: 'root',
				desc: '超级管理员',
				auth: _auth
			});

			_role.save(function(e, r) { //创建角色				
				var id = r._id;
				var data = {
					user: 'admin',
					passwd: cipher.md5['+']('admin'),
					roles: id
				};
				User.create(data, fn); //创建超级管理员
			});
		});
	});
};

exports.insertRole = function(data, fn) {
	Role.create(data, fn);
};

exports.insertAdmin = function(data, fn) {
	data.passwd = cipher.md5['+']('admin');
	User.create(data, fn);
};

exports.updateAdmin = function(id, data, fn) {
	User.findOneAndUpdate({
		_id: id
	}, {
		$set: {
			'roles': data
		}
	}, fn);
};

exports.resetAdmin = function(id, fn) {
	User.findOneAndUpdate({
		_id: id
	}, {
		$set: {
			'passwd': cipher.md5['+']('admin')
		}
	}, fn);
};

exports.uppwdAdmin = function(user, oldpwd, pwd, fn) {
	User.findOneAndUpdate({
		user: user,
		passwd: cipher.md5['+'](oldpwd)
	}, {
		$set: {
			'passwd': cipher.md5['+'](pwd)
		}
	}, fn);
};

exports.deleteAdmin = function(id, fn) {
	User.remove({
		_id: id
	}, fn);
};

exports.updateRole = function(id, data, fn) {
	Role.findOneAndUpdate({
		_id: id
	}, {
		$set: {
			'auth': data
		}
	}, fn);
};