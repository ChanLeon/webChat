'use strict';

var crypto = require('crypto');
var NodeRSA = require('node-rsa');

function _md5(content, signKey, charset) {
	var md5 = crypto.createHash('md5');
	md5.update(content + (signKey || ''), charset || 'UTF-8');
	return md5.digest('hex');
}

exports.md5 = {
	"+": _md5,
	"sign": _md5,
	"verify": function(content, signKey, signMsg, charset) {
		return _md5(content, signKey, charset) === signMsg;
	}
};

exports.rsa = {
	"sign": function(content, signKey, charset) {
		var rsa = crypto.createSign('RSA-SHA1');
		rsa.update(content, charset || 'UTF-8');
		return rsa.sign(signKey, 'hex');
	},
	"verify": function(content, signKey, signMsg, charset) {
		var rsa = crypto.createVerify('RSA-SHA1');
		rsa.update(content, charset);
		return rsa.verify(signKey, signMsg, 'hex');
	},
	"+": function(content, publicKey) {
		var key = new NodeRSA(publicKey);
		return key.encrypt(content, 'base64');
	},
	"-": function(content, privateKey) {
		var key = new NodeRSA(privateKey);
		return key.decrypt(content, 'utf8');
	}
};

exports.des = {
	"+": function(data, key) {
		var cipher = crypto.createCipher('des', key);
		var crypted = cipher.update(data, 'utf8', 'hex');
		crypted += cipher.final('hex');
		return crypted;
	},

	"-": function(data, key) {
		var decipher = crypto.createDecipher('des', key);
		try {
			var dec = decipher.update(data, 'hex', 'utf8');
			dec += decipher.final('utf8');
			return dec;
		} catch (e) {
			return '';
		}
	}
};

exports.base64 = {
	"+": function(content) {
		return new Buffer(content).toString('base64');
	},

	"-": function(content) {
		return new Buffer(content, 'base64').toString();
	}
};